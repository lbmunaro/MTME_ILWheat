
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Online License checked out Thu Feb 13 13:09:21 2025
[Previously saved workspace restored]

> # Multi-Trait Multi-Environment models ----
> # This script fits Multi-Trait Multi-Environment models
> 
> # Clean workspace
> rm(list = objects())  # Removes all objects from the environment.
> 
> # Packages ----
> library(tidyverse) # R packages for data science.
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(asreml) # ASReml-R package.
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loading ASReml-R version 4.2

> 
> # Use for HPC only
> setwd('~/MTME_ILWheat/')
> 
> # Load data ----
> ## Pheno & Ginv
> load('Data/ILYT_Pheno-Gmatrix.RData')
> 
> # Fit rr5a model ----
> ## Run model ----
> MTME.z_rr5a.asr <- asreml(
+   Pheno_z ~ TraitEnv,
+   random = ~ rr(TraitEnv,5):vm(Gkeep, Ginv.sparse) + diag(TraitEnv):vm(Gkeep, Ginv.sparse),
+   residual = ~ dsum(~ ar1(Col):ar1(Row) | TraitEnv),
+   sparse = ~ TraitEnv:Gdrop,
+   data = ILYT_Pheno,
+   na.action = na.method(x = "include"),
+   maxit = 40,
+   workspace = '88gb'
+ )
Warning messages:
1: In asreml(Pheno_z ~ TraitEnv, random = ~rr(TraitEnv, 5):vm(Gkeep,  :
  Log-likelihood not converged
2: In asreml(Pheno_z ~ TraitEnv, random = ~rr(TraitEnv, 5):vm(Gkeep,  :
  Some components changed by more than 1% on the last iteration
> 
> # Print model info
> print('MTME.z-rr5a')
[1] "MTME.z-rr5a"
> print('AIC')
[1] "AIC"
> print(summary(MTME.z_rr5a.asr)$aic)
[1] -35137.93
attr(,"parameters")
[1] 341
> print(paste('convergence =', MTME.z_rr5a.asr$converge))
[1] "convergence = FALSE"
> MTME.z_rr5a.asr$trace |>
+   as.data.frame() |> rownames_to_column('Iteration') |>
+   filter(Iteration=='LogLik') |> print()
  Iteration        1        2        3       4        5        6        7
1    LogLik 8704.468 12368.16 14705.95 15830.3 16650.95 17091.68 17369.46
         8        9       10       11       12       13       14       15
1 17535.31 17670.31 17748.45 17785.32 17818.72 17833.83 17846.13 17851.71
        16      17       18       19       20       21       22       23
1 17853.77 17856.2 17858.54 17862.17 17864.05 17868.68 17872.61 17876.45
        24       25       26       27       28       29       30      31
1 17880.22 17883.76 17886.55 17889.84 17892.58 17894.68 17896.72 17898.6
        32       33       34      35       36       37       38      39
1 17901.01 17902.58 17903.96 17905.2 17906.29 17907.27 17908.16 17909.2
        40       41
1 17909.96 17909.96
> 
> save.image('Data/MTME.z_rr5a.RData')
> 
> ## Update1 model ----
> MTME.z_rr5a.asr <- update(MTME.z_rr5a.asr)

 *** caught bus error ***
address 0x7f59c40f8fb0, cause 'non-existent physical address'

Traceback:
 1: doTryCatch(return(expr), name, parentenv, handler)
 2: tryCatchOne(expr, names, parentenv, handlers[[1L]])
 3: tryCatchList(expr, classes, parentenv, handlers)
 4: tryCatch(expr, error = function(e) e)
 5: withCallingHandlers(tryCatch(expr, error = function(e) e), warning = w.handler)
 6: vsn.tryCatch.W.E(expr)
 7: vsn.tryCatch.W.E.rethrow(.Call(.NAME, ..., PACKAGE = this_info$dll_name),     call. = this_call)
 8: vs_Call("vs_main", data, list(info = ginverse, obj = asr_grm(ginverse,     data = data), mef = mkr(mef)), R.param, G.param, predict,     options, CORE_VERSION = ddd$core_version)
 9: asreml(fixed = Pheno_z ~ TraitEnv, random = ~rr(TraitEnv, 5):vm(Gkeep,     Ginv.sparse) + diag(TraitEnv):vm(Gkeep, Ginv.sparse), sparse = ~TraitEnv:Gdrop,     residual = ~dsum(~ar1(Col):ar1(Row) | TraitEnv), na.action = na.method(x = "include"),     data = ILYT_Pheno, maxit = 40, workspace = "88gb", R.param = MTME.z_rr5a.asr$R.param,     G.param = MTME.z_rr5a.asr$G.param)
10: eval(newcall, sys.parent())
11: eval(newcall, sys.parent())
12: update.asreml(MTME.z_rr5a.asr)
13: update(MTME.z_rr5a.asr)
14: update(MTME.z_rr5a.asr)
An irrecoverable exception occurred. R is aborting now ...
